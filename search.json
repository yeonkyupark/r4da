[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "데이터분석 실무 R기",
    "section": "",
    "text": "들어가기\nR 언어를 이용하여 실무에서 데이터 분석을 하고 있다. 인터넷을 통해 쉽게 접할 수 있는 정례화된 내용으론 현업 문제를 해결하기에는 많은 어려움이 있다. 그때 그때 산발적으로 학습했던 내용을 정리하고자 한다.\n현업 문제를 해결하기 위해 급급했던 내용으로 효율성은 낮을 수 있으나 효과성은 확인된 내용이다.\n\n\n\n\n\nflowchart LR\n    subgraph step1[STEP 1]\n        define[문제정의]\n    end\n    subgraph step2[STEP 2]\n        collect[자료수집]\n    end\n    subgraph step3[STEP 3]\n        clean[자료정제]\n    end\n    subgraph step4[STEP 4]\n        analyze[자료분석]\n    end\n    subgraph step5[STEP 5]\n        interpret[결과활용]\n    end\n\nstep1 --&gt; step2\nstep2 --&gt; step3\nstep3 --&gt; step4\nstep4 --&gt; step5\n\n\n\n\n\n\n\n\nLoading required package: tidyverse\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\nLoading required package: data.table\n\n\nAttaching package: 'data.table'\n\n\nThe following objects are masked from 'package:lubridate':\n\n    hour, isoweek, mday, minute, month, quarter, second, wday, week,\n    yday, year\n\n\nThe following objects are masked from 'package:dplyr':\n\n    between, first, last\n\n\nThe following object is masked from 'package:purrr':\n\n    transpose",
    "crumbs": [
      "들어가기"
    ]
  },
  {
    "objectID": "identify.html",
    "href": "identify.html",
    "title": "1  문제정의",
    "section": "",
    "text": "데이터 분석에 있어 가장 먼저 해야 하는 일은 해결하고자 하는 문제를 정의하는 것이다. 이 때 문제를 어떻게 정의하느냐에 따라 수집해야 할 데이터 범위가 정해지고 분석 방향이 결정된다.\n예를 들어 보자.\n\nA공장 제품 생산 시 불량률을 5% 감소하자.\n\n어떻게 접근할 것인가? 비지스니 상황이나 분석가의 도메인 지식에 따라 다양한 형태로 접근방법이 나타날 것이다. 누군가는 자재 투입부터 불량을 줄이기 위해 입고 검사 데이터를 활용할 것이고, 누군가는 생산 과정에서 발생하는 불량을 줄이기 위해 각 단계별 검사 결과를 수집 분석할 것이다.\n이렇듯 문제 정의에 따라 수집할 수 있는 자료가 정해지고 그에 적합한 분석방법을 선택하게 된다.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>문제정의</span>"
    ]
  },
  {
    "objectID": "collect.html",
    "href": "collect.html",
    "title": "2  자료수집",
    "section": "",
    "text": "2.1 직접 생성\n데이터 양이 많지 않다면 단순히 데이터를 복사/붙여넣기 하거나 하나씩 직접 작성할 수도 있다.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>자료수집</span>"
    ]
  },
  {
    "objectID": "collect.html#직접-생성",
    "href": "collect.html#직접-생성",
    "title": "2  자료수집",
    "section": "",
    "text": "2.1.1 data.frame을 이용한 자료 생성성\nOA제품별 가격을 data.frame을 통해 작성할 수 있다.\n\ndf_OA &lt;- data.frame(\n  product = c(\"PC\", \"Notebook\", \"Monior\"),\n  price = c(1000000, 1500000, 500000)\n)\ndf_OA\n\n   product   price\n1       PC 1000000\n2 Notebook 1500000\n3   Monior  500000\n\n\n\n\n2.1.2 tibble을 이용한 자료 생성\ndata.frame에서 개선된 자료형인 tibble 형식을 이용할 수도 있다.\n\nlibrary(tibble)\ntb_OA &lt;- tibble(\n  product = c(\"PC\", \"Notebook\", \"Monior\"),\n  price = c(1000000, 1500000, 500000)\n)\ntb_OA\n\n# A tibble: 3 × 2\n  product    price\n  &lt;chr&gt;      &lt;dbl&gt;\n1 PC       1000000\n2 Notebook 1500000\n3 Monior    500000\n\n\n\n\n2.1.3 package를 이용한 자료 입력\ndatapasta1패키지를 이용하여 자료를 쉽게 입력할 수 있다. datapasta를 설치하게 되면 Addins 메뉴에 추가된다.\n\n스프레드쉬트에서 아래와 같이 입력한 후 복사를 한다.\n\nAddins 메뉴를 통해 원하는 명령어를 선택한다.\n\n아래는 Paste as tribble 명령어를 선택한 결과이다.\n\ntibble::tribble(\n        ~product,   ~price,\n            \"PC\", 1000000L,\n        \"NotePC\", 1500000L,\n       \"Monitor\",  500000L\n       )\n\n\n\n2.1.4 데이터 내보내기\n작성된 데이터는 여러 형태로 내보낼 수 있다. 하지만 다른 프로그램과 호환성이나 범용성을 고려한다면 가능한 .csv 형식으로 저장한다. 대표적으로 utils 패키지 내 write.csv()와 readr 패키지 내 write_csv()를 이용한다. 사용법은 대동소이하며 개인 취향에 따라 취사선택하면 된다.\n\nwrite.csv(x = df_OA, file = \"./OA.csv\")\n\n이외 엑셀 형태로 저장할 수도 있다. opnexlsx 패키지를 설치하여 읽고(read.xlsx()) 필요에 따라 적절히 활용한다.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>자료수집</span>"
    ]
  },
  {
    "objectID": "collect.html#파일에서-읽어-오기",
    "href": "collect.html#파일에서-읽어-오기",
    "title": "2  자료수집",
    "section": "2.2 파일에서 읽어 오기",
    "text": "2.2 파일에서 읽어 오기\n데이터 분석에 사용되는 파일 형식은 통상적으로 .csv 형식을 이용한다. 여러 함수를 통해 파일 내 데이터를 읽을 수 있지만 통상적으로 read.csv()을 이용한다. 테이블 형태로 구성된 데이터라 하더라도 구분자나 해더 여부, 행 이름 등 파일 특성에 따라 read.table()이나 read.delim()을 이용하기도 한다.\n\n2.2.1 csv 파일에서 읽어 오기\nread.csv를 통해 파일을 읽어 올 수 있다.\n\ndf_OA_from_csv &lt;- read.csv(file = \"./OA.csv\")\ndf_OA_from_csv\n\n\n\n2.2.2 엑셀 파일에서 읽어 오기\nopenxlsx 패키지 내 write.xlsx()를 이용하여 엑셀 형식으로 저장할 수 있다.\n\n\n2.2.3 대용량 파일 읽어 오기\ndata.table 패키지 내 fread() 함수를 통해 대용량 데이터를 빠르고 편리하게 읽을 수 있다. data.frame이나 tibble 형태의 자료형은 다양한 패키지를 사용하여 데이터 정제, 가공, 집약할 수 있으나 처리 속도가 느리다는 단점이 있다. 이를 해결하기 위한 데이터 형태가 data.table이다. 즉 fread()를 통해 데이터를 읽게 되면 자료형태는 data.table이 된다. data.frame 속성을 가지고 있어 data.frame을 지원하는 패키지를 대부분 사용할 수 있다.\n\ndt_OA_from_csv &lt;-data.table::fread(\"./OA.csv\")\ndt_OA_from_csv\n\n      V1  product   price\n   &lt;int&gt;   &lt;char&gt;   &lt;num&gt;\n1:     1       PC 1000000\n2:     2 Notebook 1500000\n3:     3   Monior  500000\n\n\n\nclass(dt_OA_from_csv)\n\n[1] \"data.table\" \"data.frame\"",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>자료수집</span>"
    ]
  },
  {
    "objectID": "collect.html#db-또는-외부에서-읽어-오기",
    "href": "collect.html#db-또는-외부에서-읽어-오기",
    "title": "2  자료수집",
    "section": "2.3 DB 또는 외부에서 읽어 오기",
    "text": "2.3 DB 또는 외부에서 읽어 오기\n이 외 데이터가 자동으로 수집되어 적재되는 시스템에서 읽어 올 수 있다. 이런 경우 데이터베이스(DB)로 저장소가 구축되어 있고 DBMS를 통해 관리된다. R에서는 sql을 지원하며 제품별 패키지가 제공되어 있다. 본 예제에서는 SQLite에서 데이터를 읽고 쓰는 방법을 알아 보기로 한다.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>자료수집</span>"
    ]
  },
  {
    "objectID": "collect.html#footnotes",
    "href": "collect.html#footnotes",
    "title": "2  자료수집",
    "section": "",
    "text": "https://cran.r-project.org/web/packages/datapasta/readme/README.html↩︎",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>자료수집</span>"
    ]
  },
  {
    "objectID": "clean.html",
    "href": "clean.html",
    "title": "3  자료정제",
    "section": "",
    "text": "3.1 결측치 처리\nR언어에서 결측치(missing value 또는 missing data)는 NA(Not Available)로 표기된다. 결측치는 다음과 같은 상황에서 발생할 수 있다.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>자료정제</span>"
    ]
  },
  {
    "objectID": "clean.html#결측치-처리",
    "href": "clean.html#결측치-처리",
    "title": "3  자료정제",
    "section": "",
    "text": "MCAR(Missing Completely At Random) 관촬된 값을 입력 중 실수 또는 오류로 입력하지 못한 경우\nMAR(Missing At Random) 값을 어떤 이유로든 관촬하지 못한 경우\nMNAR(Missing At Not Random) 적절한 값이 입력을 하지 못한 경우\n\n\n3.1.1 결측치 제거\n\n\n3.1.2 결측치 대체",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>자료정제</span>"
    ]
  },
  {
    "objectID": "clean.html#이상치-처리",
    "href": "clean.html#이상치-처리",
    "title": "3  자료정제",
    "section": "3.2 이상치 처리",
    "text": "3.2 이상치 처리",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>자료정제</span>"
    ]
  },
  {
    "objectID": "analyze.html",
    "href": "analyze.html",
    "title": "4  자료분석",
    "section": "",
    "text": "정의된 문제와 그 범위에 따라 분석 유형을 정의한다. 데이터 분석 유형에는 DDA, EDA, CDA, PDA가 있으며 단순 기술통계 수준에서 값을 예측하는 형태까지 진행된다.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>자료분석</span>"
    ]
  },
  {
    "objectID": "interpret.html",
    "href": "interpret.html",
    "title": "5  결과활용",
    "section": "",
    "text": "분석 결과는 데이터 기반 의사결정을 위한 수단을 제공한다. 이때 사용되는 도구는 그래프를 통한 시각화, 지속적인 추적을 위한 시스템 구축 등을 진행할 수 있다.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>결과활용</span>"
    ]
  }
]